name: CI/CD Pipeline com Node.js e Terraform (EC2 AWS)

# Disparo do workflow em push ou pull request na main
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

#Configuração dos jobs do workflow (build-and-test e deploy)
jobs:
  # Job 1 - Integração Contínua (CI) 
  build-and-test:  
    runs-on: ubuntu-latest

    steps:
      # 1. Clonar o repositório
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 3. Cache de dependências
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4. Instalar dependências
      - name: Install dependencies
        run: npm ci

      # 5. Verificação de qualidade com ESlint
      - name: Lint code with ESlint
        run: npm run lint

      # 6. Verificação de formatação com Prettier
      - name: Check code format with Prettier
        run: npm run format:check

      # 7. Rodar testes com Jest
      - name: Run tests with Jest
        run: npm run test

      # 8. Build da aplicação
      - name: Build the application
        run: npm run build
  
  # Job 2 - Entrega Contínua (CD) 
  deploy:  
    needs: build-and-test
    runs-on: ubuntu-latest
    defaults: 
      run:
        working-directory: ./infra/terraform 

    steps: 
     # 1. Clonar o repositório novamente 
      - name: Checkout code
        uses: actions/checkout@v3

     # 2. Configuração das credenciais AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

     # 3. Validar se a autenticação AWS funcionou
      - name: Test AWS authentication
        run: aws sts get-caller-identity 

     # 4. Instalar Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with: 
          terraform_version: '1.12.1'
        
     # 5. Inicializar Terraform
      - name: Terraform init
        run: terraform init
        
     # 6. Validar a configuração Terraform
      - name: Terraform Validate
        run: terraform validate

     # 7. Terraform Plan
      - name: Terraform Plan
        run: terraform plan

     # 8. Aplicar infraestrutura com Terraform (Provisionamento EC2)
      - name: Terraform Apply
        run: terraform apply -auto-approve

     # 9. Acessar EC2 via SSH e fazer deploy com Docker Compose
      - name: Deploy Docker EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/devops_pucrs
            git pull origin main
            docker-compose down || true
            docker-compose up --build -d
  
  